using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace decryptCMAuto
{
    /*
     * This class handles the actual decryption of CMR5 data.
     * For this to work, we must have a decKey (simply the HWID of the whitelisted user) + a random IV generated by CMR5.
     * AES is used to encrypt the actual data itself.
     */
    public class decryptCMToolchain
    {
        private readonly ICryptoTransform cmDecryptorCryptoTransform;
        private readonly UTF8Encoding utf8Encoding;

        //Init code.
        public decryptCMToolchain(byte[] ivBytes, string decKey)
        {
            //Copy pasted from Cookie Muncher decryption.
            byte[] ivKey = new byte[0];
            if (decKey.Length < 8)
            {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.Append(decKey);
                while (stringBuilder.ToString().Length <= 8)
                {
                    stringBuilder.Append("o");
                }
                ivKey = Encoding.UTF8.GetBytes(stringBuilder.ToString());
            }
            else if (decKey.Length > 8)
            {
                ivKey = Encoding.UTF8.GetBytes(decKey.Substring(0, 8));
            }
            else
            {
                ivKey = Encoding.UTF8.GetBytes(decKey);
            }
            RijndaelManaged rijndaelManaged = new RijndaelManaged { Mode = CipherMode.CBC };
            cmDecryptorCryptoTransform = rijndaelManaged.CreateDecryptor(ivKey, ivBytes);
            utf8Encoding = new UTF8Encoding();
        }

        //Lazy code from the original decryptCM.
        public string decryptCM_decrypt(string decStr)
        {
            string result;
            try
            {
                byte[] array = Convert.FromBase64String(decStr);
                MemoryStream memoryStream = new MemoryStream(array);
                CryptoStream cryptoStream = new CryptoStream(memoryStream, cmDecryptorCryptoTransform,
                    CryptoStreamMode.Read);
                byte[] array2 = new byte[checked(array.Length + 1)];
                int count = cryptoStream.Read(array2, 0, array2.Length);
                memoryStream.Close();
                cryptoStream.Close();
                result = utf8Encoding.GetString(array2, 0, count);
            }
            catch (Exception)
            {
                return "ERROR";
            }
            return result;
        }
    }
}
